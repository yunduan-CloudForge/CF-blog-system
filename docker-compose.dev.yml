# Docker Compose 配置文件 - 开发环境
version: '3.8'

services:
  # 博客系统主应用 - 开发模式
  blog-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: blog-system-app-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js 调试端口
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=sqlite:///app/data/blog.db
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=dev-jwt-secret-key
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src:/app/src
      - ./api:/app/api
      - ./public:/app/public
      - ./data:/app/data
      - ./logs:/app/logs
      - ./node_modules:/app/node_modules
    depends_on:
      - redis
      - postgres-dev
    networks:
      - blog-network
    restart: unless-stopped
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 缓存服务 - 开发环境
  redis:
    image: redis:7-alpine
    container_name: blog-system-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库 - 开发环境
  postgres-dev:
    image: postgres:15-alpine
    container_name: blog-system-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=blog_system_dev
      - POSTGRES_USER=blog_user
      - POSTGRES_PASSWORD=blog_password_dev
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_user -d blog_system_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 邮件服务器 - 开发环境 (MailHog)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: blog-system-mailhog-dev
    ports:
      - "1025:1025"  # SMTP 端口
      - "8025:8025"  # Web UI 端口
    networks:
      - blog-network
    restart: unless-stopped

  # 监控服务 - Prometheus (开发环境)
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: blog-system-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-dev-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - blog-network
    restart: unless-stopped

  # 监控服务 - Grafana (开发环境)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: blog-system-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana-dev-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus-dev
    networks:
      - blog-network
    restart: unless-stopped

  # 数据库管理工具 - Adminer
  adminer:
    image: adminer:latest
    container_name: blog-system-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres-dev
    depends_on:
      - postgres-dev
    networks:
      - blog-network
    restart: unless-stopped

  # Redis 管理工具 - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: blog-system-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - blog-network
    restart: unless-stopped

volumes:
  redis-dev-data:
    driver: local
  postgres-dev-data:
    driver: local
  prometheus-dev-data:
    driver: local
  grafana-dev-data:
    driver: local

networks:
  blog-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16