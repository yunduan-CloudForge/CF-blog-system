apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-system
  namespace: default
  labels:
    app: blog-system
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: blog-system
  template:
    metadata:
      labels:
        app: blog-system
        version: v1
    spec:
      containers:
      - name: blog-system
        image: blog-system:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: app-config
        configMap:
          name: blog-system-config
      - name: logs
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: blog-system-service
  namespace: default
  labels:
    app: blog-system
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: blog-system

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blog-system-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - blog.example.com
    secretName: blog-system-tls
  rules:
  - host: blog.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-system-service
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blog-system-config
  namespace: default
data:
  production.json: |
    {
      "app": {
        "name": "Blog System",
        "version": "1.0.0",
        "environment": "production",
        "debug": false
      },
      "server": {
        "port": 3000,
        "host": "0.0.0.0",
        "timeout": 30000
      },
      "cors": {
        "origin": ["https://blog.example.com"],
        "credentials": true
      },
      "rateLimit": {
        "windowMs": 900000,
        "max": 100
      },
      "security": {
        "helmet": true,
        "contentSecurityPolicy": true,
        "hsts": true
      },
      "logging": {
        "level": "info",
        "format": "json",
        "transports": ["console", "file"]
      },
      "monitoring": {
        "enabled": true,
        "metricsPath": "/metrics",
        "healthPath": "/health"
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: blog-system-secrets
  namespace: default
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAaG9zdDpwb3J0L2RiXG5hbWU=
  redis-url: cmVkaXM6Ly9ob3N0OnBvcnQ=
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleQ==
  smtp-password: eW91ci1zbXRwLXBhc3N3b3Jk
  s3-access-key: eW91ci1zMy1hY2Nlc3Mta2V5
  s3-secret-key: eW91ci1zMy1zZWNyZXQta2V5

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blog-system-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blog-system
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blog-system-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: blog-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: blog-system-sa
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: blog-system-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: blog-system-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: blog-system-sa
  namespace: default
roleRef:
  kind: Role
  name: blog-system-role
  apiGroup: rbac.authorization.k8s.io