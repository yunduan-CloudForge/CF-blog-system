# 蓝绿部署配置
# Blue Environment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-system-blue
  namespace: default
  labels:
    app: blog-system
    version: blue
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: blog-system
      version: blue
  template:
    metadata:
      labels:
        app: blog-system
        version: blue
        environment: production
    spec:
      containers:
      - name: blog-system
        image: blog-system:blue-latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      terminationGracePeriodSeconds: 30

---
# Green Environment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-system-green
  namespace: default
  labels:
    app: blog-system
    version: green
    environment: production
spec:
  replicas: 0  # Initially scaled to 0
  selector:
    matchLabels:
      app: blog-system
      version: green
  template:
    metadata:
      labels:
        app: blog-system
        version: green
        environment: production
    spec:
      containers:
      - name: blog-system
        image: blog-system:green-latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-system-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      terminationGracePeriodSeconds: 30

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: blog-system-blue-service
  namespace: default
  labels:
    app: blog-system
    version: blue
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: blog-system
    version: blue

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: blog-system-green-service
  namespace: default
  labels:
    app: blog-system
    version: green
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: blog-system
    version: green

---
# Active Service (points to current active environment)
apiVersion: v1
kind: Service
metadata:
  name: blog-system-active-service
  namespace: default
  labels:
    app: blog-system
    role: active
  annotations:
    deployment.kubernetes.io/active-color: "blue"  # Current active color
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: blog-system
    version: blue  # Initially points to blue

---
# Preview Service (for testing new deployment)
apiVersion: v1
kind: Service
metadata:
  name: blog-system-preview-service
  namespace: default
  labels:
    app: blog-system
    role: preview
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: blog-system
    version: green  # Points to inactive environment for testing

---
# Main Ingress (production traffic)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blog-system-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - blog.example.com
    secretName: blog-system-tls
  rules:
  - host: blog.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-system-active-service
            port:
              number: 80

---
# Preview Ingress (for testing new deployment)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blog-system-preview-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Preview Environment'
spec:
  tls:
  - hosts:
    - preview.blog.example.com
    secretName: blog-system-preview-tls
  rules:
  - host: preview.blog.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-system-preview-service
            port:
              number: 80

---
# Network Policy for Blue-Green isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blog-system-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: blog-system
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - podSelector:
        matchLabels:
          app: blog-system
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 80    # HTTP
    - protocol: UDP
      port: 53    # DNS

---
# Blue Environment HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blog-system-blue-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blog-system-blue
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Green Environment HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blog-system-green-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blog-system-green
  minReplicas: 0  # Initially disabled
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Pod Disruption Budget for Blue
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blog-system-blue-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: blog-system
      version: blue

---
# Pod Disruption Budget for Green
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blog-system-green-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: blog-system
      version: green