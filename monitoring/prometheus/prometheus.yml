# Prometheus configuration for Blog System monitoring
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'blog-system'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      timeout: 10s
      api_version: v2

# Rules files
rule_files:
  - "rules/*.yml"
  - "alerts/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: /metrics
    
  # Alertmanager
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 30s
    
  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '(.*)'
        replacement: '${1}'
    
  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Blog Frontend Application
  - job_name: 'blog-frontend'
    static_configs:
      - targets: ['blog-frontend:3000']
    scrape_interval: 30s
    metrics_path: /metrics
    scrape_timeout: 10s
    honor_labels: true
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'blog-frontend'
      - source_labels: [__address__]
        target_label: component
        replacement: 'web'
    
  # Blog Backend API
  - job_name: 'blog-backend'
    static_configs:
      - targets: ['blog-backend:3001']
    scrape_interval: 30s
    metrics_path: /api/metrics
    scrape_timeout: 10s
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'blog-backend'
      - source_labels: [__address__]
        target_label: component
        replacement: 'api'
    
  # PostgreSQL Database
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'postgresql'
      - source_labels: [__address__]
        target_label: component
        replacement: 'database'
    
  # Redis Cache
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'redis'
      - source_labels: [__address__]
        target_label: component
        replacement: 'cache'
    
  # Nginx Web Server
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'nginx'
      - source_labels: [__address__]
        target_label: component
        replacement: 'webserver'
    
  # Traefik Load Balancer
  - job_name: 'traefik'
    static_configs:
      - targets: ['traefik:8080']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'traefik'
      - source_labels: [__address__]
        target_label: component
        replacement: 'loadbalancer'
    
  # Elasticsearch (if used for logging)
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']
    scrape_interval: 60s
    metrics_path: /_prometheus/metrics
    scrape_timeout: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'elasticsearch'
      - source_labels: [__address__]
        target_label: component
        replacement: 'search'
    
  # Loki for log aggregation
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
    scrape_interval: 60s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'loki'
      - source_labels: [__address__]
        target_label: component
        replacement: 'logging'
    
  # Jaeger for distributed tracing
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    scrape_interval: 60s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'jaeger'
      - source_labels: [__address__]
        target_label: component
        replacement: 'tracing'
    
  # Grafana Dashboard
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 60s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'grafana'
      - source_labels: [__address__]
        target_label: component
        replacement: 'visualization'
    
  # Docker daemon metrics (if enabled)
  - job_name: 'docker'
    static_configs:
      - targets: ['host.docker.internal:9323']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'docker'
      - source_labels: [__address__]
        target_label: component
        replacement: 'container-runtime'
    
  # Blackbox exporter for endpoint monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - http://blog-frontend:3000
        - http://blog-frontend:3000/health
        - http://blog-backend:3001/api/health
        - http://blog-backend:3001/api/posts
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115
      - source_labels: [__param_target]
        target_label: service
        regex: 'http://([^:]+):.*'
        replacement: '${1}'
    
  # Custom application metrics
  - job_name: 'custom-metrics'
    static_configs:
      - targets: ['blog-backend:3001']
    scrape_interval: 15s
    metrics_path: /api/custom-metrics
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'blog-custom'
      - source_labels: [__address__]
        target_label: component
        replacement: 'business-metrics'
    
  # Service discovery for dynamic targets
  - job_name: 'docker-discovery'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 30s
        port: 9090
    relabel_configs:
      # Only scrape containers with the prometheus.scrape label
      - source_labels: [__meta_docker_container_label_prometheus_scrape]
        action: keep
        regex: true
      # Use the prometheus.port label for the port
      - source_labels: [__meta_docker_container_label_prometheus_port]
        action: replace
        target_label: __address__
        regex: (.*)
        replacement: ${__meta_docker_container_network_ip}:${1}
      # Use the prometheus.path label for the metrics path
      - source_labels: [__meta_docker_container_label_prometheus_path]
        action: replace
        target_label: __metrics_path__
        regex: (.*)
        replacement: ${1}
      # Set the job name from the prometheus.job label
      - source_labels: [__meta_docker_container_label_prometheus_job]
        action: replace
        target_label: job
      # Set the instance name from the container name
      - source_labels: [__meta_docker_container_name]
        action: replace
        target_label: instance
        regex: /(.*)
        replacement: ${1}
      # Add container labels as metrics labels
      - regex: __meta_docker_container_label_(.+)
        action: labelmap
        replacement: ${1}

# Remote write configuration (for long-term storage)
remote_write:
  - url: "http://prometheus-remote-storage:9201/write"
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500
    write_relabel_configs:
      # Drop high cardinality metrics
      - source_labels: [__name__]
        regex: 'go_memstats_.*'
        action: drop
      - source_labels: [__name__]
        regex: 'prometheus_tsdb_.*'
        action: drop

# Remote read configuration
remote_read:
  - url: "http://prometheus-remote-storage:9201/read"
    read_recent: true

# Storage configuration
storage:
  tsdb:
    path: /prometheus/data
    retention.time: 30d
    retention.size: 50GB
    wal-compression: true
    no-lockfile: false

# Web configuration
web:
  console.templates: /etc/prometheus/consoles
  console.libraries: /etc/prometheus/console_libraries
  enable-lifecycle: true
  enable-admin-api: true
  max-connections: 512
  read-timeout: 30s
  route-prefix: /
  external-url: http://prometheus:9090

# Log configuration
log:
  level: info
  format: logfmt

# Feature flags
feature_flags:
  - promql-at-modifier
  - remote-write-receiver
  - exemplar-storage