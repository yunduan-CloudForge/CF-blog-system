# Promtail Configuration for Blog System Log Collection
server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info
  log_format: logfmt
  graceful_shutdown_timeout: 5s

# Position file to track log reading progress
positions:
  filename: /tmp/positions.yaml

# Loki client configuration
clients:
  - url: http://loki:3100/loki/api/v1/push
    tenant_id: ""
    batchwait: 1s
    batchsize: 1048576  # 1MB
    timeout: 10s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    external_labels:
      cluster: blog-system
      environment: production
      datacenter: local

# Scrape configurations
scrape_configs:
  # Docker container logs
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging.enabled=true"]
    relabel_configs:
      # Set the log path from container labels
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
      # Set container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*?)'
        target_label: 'container'
      # Set service name from container labels
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      # Set project name from container labels
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'project'
      # Set image name
      - source_labels: ['__meta_docker_container_image']
        target_label: 'image'
      # Set container ID
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'
    pipeline_stages:
      # Parse JSON logs
      - json:
          expressions:
            timestamp: time
            level: level
            message: msg
            service: service
            trace_id: trace_id
            span_id: span_id
            user_id: user_id
            request_id: request_id
            method: method
            path: path
            status_code: status_code
            duration: duration
            error: error
      # Parse timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - "2006-01-02T15:04:05.000Z"
            - "2006-01-02 15:04:05"
      # Set log level
      - labels:
          level:
          service:
          trace_id:
          request_id:
      # Drop debug logs in production
      - drop:
          source: level
          expression: "debug"
          drop_counter_reason: "debug_logs_dropped"
      # Parse multiline stack traces
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}'
          max_wait_time: 3s
      # Extract additional fields for specific services
      - match:
          selector: '{service="blog-backend"}'
          stages:
            - regex:
                expression: '(?P<method>GET|POST|PUT|DELETE|PATCH)\s+(?P<endpoint>/\S+)\s+(?P<status>\d{3})\s+(?P<duration>\d+\.?\d*)ms'
            - labels:
                method:
                endpoint:
                status:
            - metrics:
                request_duration:
                  type: Histogram
                  description: "HTTP request duration"
                  source: duration
                  config:
                    buckets: [0.1, 0.5, 1, 2, 5, 10, 30]
                request_total:
                  type: Counter
                  description: "Total HTTP requests"
                  config:
                    action: inc

  # Blog Frontend logs
  - job_name: blog-frontend
    static_configs:
      - targets:
          - localhost
        labels:
          job: blog-frontend
          service: frontend
          __path__: /var/log/blog-frontend/*.log
    pipeline_stages:
      # Parse Next.js/React logs
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?P<level>\w+)\s+(?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
      # Extract page and component information
      - match:
          selector: '{service="frontend"}'
          stages:
            - regex:
                expression: 'Page: (?P<page>\S+)'
            - regex:
                expression: 'Component: (?P<component>\S+)'
            - labels:
                page:
                component:

  # Blog Backend API logs
  - job_name: blog-backend
    static_configs:
      - targets:
          - localhost
        labels:
          job: blog-backend
          service: backend
          __path__: /var/log/blog-backend/*.log
    pipeline_stages:
      # Parse Express.js/Node.js logs
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            method: req.method
            url: req.url
            status: res.statusCode
            duration: responseTime
            user_id: user.id
            ip: req.ip
            user_agent: req.headers.user-agent
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          method:
          status:
          user_id:
      # Track API metrics
      - metrics:
          api_requests_total:
            type: Counter
            description: "Total API requests"
            config:
              action: inc
          api_request_duration:
            type: Histogram
            description: "API request duration"
            source: duration
            config:
              buckets: [0.1, 0.5, 1, 2, 5, 10]

  # PostgreSQL logs
  - job_name: postgresql
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgresql
          service: database
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      # Parse PostgreSQL logs
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \w+)\s+\[(?P<pid>\d+)\]\s+(?P<level>\w+):\s+(?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: "2006-01-02 15:04:05.000 MST"
      - labels:
          level:
          pid:
      # Extract slow query information
      - match:
          selector: '{service="database"}'
          stages:
            - regex:
                expression: 'duration: (?P<duration>\d+\.\d+) ms'
            - regex:
                expression: 'statement: (?P<query>.*)'
            - labels:
                duration:
            # Track slow queries
            - match:
                selector: '{duration=~"[1-9]\\d{2,}.*"}'
                stages:
                  - metrics:
                      slow_queries_total:
                        type: Counter
                        description: "Total slow queries"
                        config:
                          action: inc

  # Redis logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          service: cache
          __path__: /var/log/redis/*.log
    pipeline_stages:
      # Parse Redis logs
      - regex:
          expression: '^(?P<pid>\d+):\w+ (?P<timestamp>\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>.) (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: "02 Jan 2006 15:04:05.000"
      - labels:
          level:
          pid:

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          service: webserver
          log_type: access
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      # Parse Nginx access logs
      - regex:
          expression: '^(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<timestamp>[^\]]+)\] "(?P<method>\S+) (?P<path>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<bytes_sent>\d+) "(?P<referer>[^"]*)" "(?P<user_agent>[^"]*)" "(?P<forwarded_for>[^"]*)"'
      - timestamp:
          source: timestamp
          format: "02/Jan/2006:15:04:05 -0700"
      - labels:
          method:
          status:
          remote_addr:
      # Track HTTP metrics
      - metrics:
          nginx_requests_total:
            type: Counter
            description: "Total nginx requests"
            config:
              action: inc
          nginx_request_bytes:
            type: Histogram
            description: "Nginx request bytes"
            source: bytes_sent
            config:
              buckets: [100, 1000, 10000, 100000, 1000000]

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          service: webserver
          log_type: error
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      # Parse Nginx error logs
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: "2006/01/02 15:04:05"
      - labels:
          level:
          pid:

  # System logs (syslog)
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          service: system
          __path__: /var/log/syslog
    pipeline_stages:
      # Parse syslog format
      - regex:
          expression: '^(?P<timestamp>\w{3}\s+\d{1,2} \d{2}:\d{2}:\d{2}) (?P<hostname>\S+) (?P<program>\S+)(\[(?P<pid>\d+)\])?: (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: "Jan 02 15:04:05"
          location: "Local"
      - labels:
          hostname:
          program:
          pid:

  # Application-specific logs
  - job_name: application-logs
    file_sd_configs:
      - files:
          - /etc/promtail/file_sd/*.yml
        refresh_interval: 5m
    pipeline_stages:
      # Generic JSON log parsing
      - json:
          expressions:
            timestamp:
            level:
            message:
            service:
            component:
            trace_id:
            span_id:
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          service:
          component:

# Limits configuration
limits_config:
  readline_rate: 10000
  readline_burst: 20000
  max_streams: 0

# Target configuration
target_config:
  sync_period: 10s

# Tracing configuration
tracing:
  enabled: false
  jaeger:
    agent:
      host: jaeger
      port: 6831
    sampler:
      type: const
      param: 1